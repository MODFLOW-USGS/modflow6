# makedefaults created on 2021-10-12 16:13:16.130574
# by pymake (version 1.2.1) for the 'mf6' executable 
# using the 'gfortran' fortran compiler(s).

# determine OS
ifeq ($(OS), Windows_NT)
	detected_OS = Windows
	OS_macro = -D_WIN32
else
	detected_OS = $(shell sh -c 'uname 2>/dev/null || echo Unknown')
	ifeq ($(detected_OS), Darwin)
		OS_macro = -D__APPLE__
	else
		OS_macro = -D__LINUX__
	endif
endif

# Define the directories for the object and module files
# and the executable and its path.
BINDIR = ../bin
OBJDIR = ./obj_temp
MODDIR = ./mod_temp
INCSWITCH = -I $(OBJDIR)
MODSWITCH = -J $(MODDIR)

# define program name
PROGRAM = $(BINDIR)/mf6

# define os dependent program name
ifeq ($(detected_OS), Windows)
	PROGRAM = $(BINDIR)/mf6.exe
endif

# use GNU compilers if defined compilers do not exist
ifeq ($(detected_OS), Windows)
	WHICH = where
else
	WHICH = which
endif
ifeq (, $(shell $(WHICH) $(FC)))
	FC = gfortran
endif

# set fortran compiler to gfortran if it is f77
ifeq ($(FC), f77)
	FC = gfortran
	# set c compiler to gcc if not passed on the command line
	ifneq ($(origin CC), "command line")
		ifneq ($(CC), gcc)
			CC = gcc
		endif
	endif
endif

# set the optimization level (OPTLEVEL) if not defined
OPTLEVEL ?= -O2

# set the fortran flags
ifeq ($(detected_OS), Windows)
	ifeq ($(FC), gfortran)
		FFLAGS ?= -static -fbacktrace -ffpe-summary=overflow -ffpe-trap=overflow,zero,invalid $(OS_macro) -Wtabs -Wline-truncation -Wunused-label -Wunused-variable -pedantic -std=f2018 -Wcharacter-truncation -cpp
	endif
else
	ifeq ($(FC), gfortran)
		FFLAGS ?= -fbacktrace -ffpe-summary=overflow -ffpe-trap=overflow,zero,invalid $(OS_macro) -Wtabs -Wline-truncation -Wunused-label -Wunused-variable -pedantic -std=f2018 -Wcharacter-truncation -cpp
	endif
	ifeq ($(FC), $(filter $(FC), ifort mpiifort))
		FFLAGS ?= -no-heap-arrays -fpe0 -traceback -fpp
		MODSWITCH = -module $(MODDIR)
	endif
endif

# set the ldflgs
ifeq ($(detected_OS), Windows)
	ifeq ($(FC), $(filter $(FC), gfortran))
		LDFLAGS ?= -static -static-libgfortran -static-libgcc -static-libstdc++ -lm
	endif
else
	ifeq ($(FC), gfortran)
		LDFLAGS ?= -lc
	endif
	ifeq ($(FC), $(filter $(FC), ifort mpiifort))
		LDFLAGS ?= -lc
	endif
endif

# check for Windows error condition
ifeq ($(detected_OS), Windows)
	ifeq ($(FC), $(filter $(FC), ifort mpiifort))
		WINDOWSERROR = $(FC)
	endif
endif

# Define task functions
# Create the bin directory and compile and link the program
all: windowscheck makedirs | $(PROGRAM)

# test for windows error
windowscheck:
ifdef WINDOWSERROR
	$(error cannot use makefile on windows with $(WINDOWSERROR))
endif

# Make the bin directory for the executable
makedirs:
	mkdir -p $(BINDIR)
	mkdir -p $(MODDIR)

# Write selected compiler settings
.PHONY: settings
settings:
	@echo "Optimization level: $(OPTLEVEL)"
	@echo "Fortran compiler:   $(FC)"
	@echo "Fortran flags:      $(FFLAGS)"
	@echo "Linker:             $(FC)"
	@echo "SYSLIBS:            $(LDFLAGS)"

# Clean the object and module files and the executable
.PHONY: clean
clean:
	-rm -rf $(OBJDIR)
	-rm -rf $(MODDIR)
	-rm -rf $(PROGRAM)

# Clean the object and module files
.PHONY: cleanobj
cleanobj:
	-rm -rf $(OBJDIR)
	-rm -rf $(MODDIR)

